import math
from Crypto.Util.number import inverse, long_to_bytes

N1 = 21637911607213759677627213247580536364227936518995569312954811425989100097409313632190076855779201191339247013916704491383884113079325219359723604849132686
c1 = 13124362072584028264631056048435022397608813402542508587853819988248281994358653330363859012287074915847945460369162176994038010443889149307504343382020175
e_val = 65537
N2 = 14444575104607057039843694175719627393069294858302297982309260329190805252457999736859107618861798136450839816434589704908653825295361369946224704817907966
p = math.gcd(N1, N2)
if p != 1 and p != N1 and p != N2 and (N1 % p == 0):
    q1 = N1 // p
    if p * q1 == N1: 
        phi1 = (p - 1) * (q1 - 1)
        try:
            d1 = inverse(e_val, phi1)
            decrypted_long = pow(c1, d1, N1)
            flag_bytes = long_to_bytes(decrypted_long)
            actual_flag = flag_bytes.decode('utf-8')
            print(f"FLAG: {actual_flag}")
        except ValueError: 
            pass 
        except Exception: 
            pass
